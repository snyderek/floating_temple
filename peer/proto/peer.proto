// Floating Temple
// Copyright 2015 Derek S. Snyder
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import "peer/proto/event.proto";
import "peer/proto/transaction_id.proto";
import "peer/proto/uuid.proto";

package floating_temple.peer;

// TODO(dss): Modify the message definitions in this file to support future
// expansion. For example, every repeated field should be a unique sub-message
// type.

message ObjectTransactionProto {
  required floating_temple.peer.Uuid object_id = 1;
  repeated floating_temple.peer.EventProto event = 2;
}

message TransactionProto {
  required floating_temple.peer.TransactionId transaction_id = 1;
  repeated floating_temple.peer.EventProto event = 3;
  required string origin_peer_id = 4;
}

message PeerVersion {
  required string peer_id = 1;
  required floating_temple.peer.TransactionId last_transaction_id = 2;
}

message RejectedPeerProto {
  required string rejected_peer_id = 1;
  // TODO(dss): Make rejected_transaction_id a repeated field.
  required floating_temple.peer.TransactionId rejected_transaction_id = 2;
}

message HelloMessage {
  required string peer_id = 1;
  required string interpreter_type = 2;
}

message GoodbyeMessage {
}

// TODO(dss): Consider sending a separate APPLY_TRANSACTION message for each
// affected object.
message ApplyTransactionMessage {
  required floating_temple.peer.TransactionId transaction_id = 1;
  repeated floating_temple.peer.ObjectTransactionProto object_transaction = 2;
}

// TODO(dss): Allow a peer to request only recent transactions from another
// peer.
message GetObjectMessage {
  required floating_temple.peer.Uuid object_id = 1;
}

message StoreObjectMessage {
  required floating_temple.peer.Uuid object_id = 1;
  repeated floating_temple.peer.TransactionProto transaction = 2;
  repeated floating_temple.peer.PeerVersion peer_version = 3;
  repeated string interested_peer_id = 4;
}

// TODO(dss): Rename this protocol message to 'RejectTransactionsMessage'.
// ("Transactions" should be plural.)
message RejectTransactionMessage {
  repeated floating_temple.peer.RejectedPeerProto rejected_peer = 1;
  required floating_temple.peer.TransactionId new_transaction_id = 2;
}

message InvalidateTransactionsMessage {
  // The range of transactions to be invalidated includes the start ID but not
  // the end ID.
  required floating_temple.peer.TransactionId start_transaction_id = 1;
  required floating_temple.peer.TransactionId end_transaction_id = 2;
}

message TestMessage {
  required string text = 1;
}

message PeerMessage {
  // TODO(dss): Add an UNSUBSCRIBE_FROM_OBJECT message type.

  enum Type {
    UNKNOWN = 0;

    HELLO = 1;
    GOODBYE = 2;
    APPLY_TRANSACTION = 3;
    GET_OBJECT = 4;
    STORE_OBJECT = 5;
    REJECT_TRANSACTION = 6;
    INVALIDATE_TRANSACTIONS = 7;

    TEST = 1001;
  }

  // Exactly one of the following fields must be set.
  //
  // In the protocol buffers format, field numbers in the range 1-15 require the
  // fewest bits to encode. Therefore, we reserve those numbers for the fields
  // that are used most frequently.

  optional floating_temple.peer.HelloMessage hello_message = 16;
  optional floating_temple.peer.GoodbyeMessage goodbye_message = 17;
  optional floating_temple.peer.ApplyTransactionMessage
      apply_transaction_message = 1;
  optional floating_temple.peer.GetObjectMessage get_object_message = 2;
  optional floating_temple.peer.StoreObjectMessage store_object_message = 3;
  optional floating_temple.peer.RejectTransactionMessage
      reject_transaction_message = 4;
  optional floating_temple.peer.InvalidateTransactionsMessage
      invalidate_transactions_message = 5;
  optional floating_temple.peer.TestMessage test_message = 1001;
}
