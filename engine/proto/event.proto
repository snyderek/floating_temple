// Floating Temple
// Copyright 2015 Derek S. Snyder
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import "engine/proto/uuid.proto";
import "engine/proto/value_proto.proto";

package floating_temple.engine;

message ObjectCreationEventProto {
  required bytes data = 1;
  repeated floating_temple.engine.Uuid referenced_object_id = 2;
}

message SubObjectCreationEventProto {
  required floating_temple.engine.Uuid new_object_id = 1;
}

message BeginTransactionEventProto {
}

message EndTransactionEventProto {
}

message MethodCallEventProto {
  // TODO(dss): Allow a method execution to directly read or write the state of
  // multiple objects. (E.g., in Python, the rich comparison operations read the
  // state of two different objects.)
  required string method_name = 1;
  repeated floating_temple.engine.ValueProto parameter = 2;
}

message MethodReturnEventProto {
  required floating_temple.engine.ValueProto return_value = 1;
}

message SubMethodCallEventProto {
  required string method_name = 1;
  repeated floating_temple.engine.ValueProto parameter = 2;
  required floating_temple.engine.Uuid callee_object_id = 3;
}

message SubMethodReturnEventProto {
  required floating_temple.engine.ValueProto return_value = 1;
}

message SelfMethodCallEventProto {
  required string method_name = 1;
  repeated floating_temple.engine.ValueProto parameter = 2;
}

message SelfMethodReturnEventProto {
  required floating_temple.engine.ValueProto return_value = 1;
}

message EventProto {
  enum Type {
    UNKNOWN = 0;

    // <Object> was created.
    OBJECT_CREATION = 1;

    // <Object> created another object.
    SUB_OBJECT_CREATION = 11;

    // <Object> began a transaction (possibly nested).
    BEGIN_TRANSACTION = 2;

    // <Object> ended the current transaction (possibly nested).
    END_TRANSACTION = 3;

    // A method was called on <Object>.
    METHOD_CALL = 4;

    // A method on <Object> returned.
    METHOD_RETURN = 5;

    // <Object> called a method on another object.
    SUB_METHOD_CALL = 6;

    // A method on another object returned to <Object>.
    SUB_METHOD_RETURN = 7;

    // <Object> called a method on itself.
    SELF_METHOD_CALL = 8;

    // A self-method call on <Object> returned.
    SELF_METHOD_RETURN = 9;
  }

  // Exactly one of the following fields must be set.
  optional floating_temple.engine.ObjectCreationEventProto object_creation = 1;
  optional floating_temple.engine.SubObjectCreationEventProto
      sub_object_creation = 11;
  optional floating_temple.engine.BeginTransactionEventProto
      begin_transaction = 2;
  optional floating_temple.engine.EndTransactionEventProto end_transaction = 3;
  optional floating_temple.engine.MethodCallEventProto method_call = 4;
  optional floating_temple.engine.MethodReturnEventProto method_return = 5;
  optional floating_temple.engine.SubMethodCallEventProto sub_method_call = 6;
  optional floating_temple.engine.SubMethodReturnEventProto
      sub_method_return = 7;
  optional floating_temple.engine.SelfMethodCallEventProto self_method_call = 8;
  optional floating_temple.engine.SelfMethodReturnEventProto
      self_method_return = 9;

  repeated floating_temple.engine.Uuid new_object_id = 10;
}
