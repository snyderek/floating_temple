// Floating Temple
// Copyright 2015 Derek S. Snyder
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package floating_temple.toy_lang;

message NoneProto {
}

message BoolProto {
  required bool value = 1;
}

message IntProto {
  required sint64 value = 1;
}

message StringProto {
  required string value = 1;
}

message SymbolProto {
}

message VariableProto {
  // Index of the object that the variable currently points to.
  optional int64 object_index = 1;
}

message SymbolBindingProto {
  required int64 symbol_id = 1;
  required int64 object_index = 2;
}

message CodeBlockProto {
  required floating_temple.toy_lang.ExpressionProto expression = 1;
  repeated floating_temple.toy_lang.SymbolBindingProto symbol_binding = 2;
  repeated int64 unbound_symbol_id = 3;
}

message ExpressionObjectProto {
  required floating_temple.toy_lang.CodeBlockProto code_block = 1;
}

message IntExpressionProto {
  required int64 int_value = 1;
}

message StringExpressionProto {
  required string string_value = 1;
}

message SymbolExpressionProto {
  required int64 symbol_id = 1;
}

message BlockExpressionProto {
  required floating_temple.toy_lang.ExpressionProto expression = 1;
  repeated int64 unbound_symbol_id = 2;
}

message FunctionCallExpressionProto {
  required floating_temple.toy_lang.ExpressionProto function = 1;
  repeated floating_temple.toy_lang.ExpressionProto parameter = 2;
}

message ListExpressionProto {
  repeated floating_temple.toy_lang.ExpressionProto list_item = 1;
}

message ExpressionProto {
  enum Type {
    UNKNOWN = 0;

    INT = 1;
    STRING = 2;
    SYMBOL = 7;
    BLOCK = 3;
    FUNCTION_CALL = 5;
    LIST = 6;
  }

  // Exactly one of the following fields must be set.
  optional floating_temple.toy_lang.IntExpressionProto int_expression = 1;
  optional floating_temple.toy_lang.StringExpressionProto string_expression = 2;
  optional floating_temple.toy_lang.SymbolExpressionProto symbol_expression = 7;
  optional floating_temple.toy_lang.BlockExpressionProto block_expression = 3;
  optional floating_temple.toy_lang.FunctionCallExpressionProto
      function_call_expression = 5;
  optional floating_temple.toy_lang.ListExpressionProto list_expression = 6;
}

message ListProto {
  repeated int64 object_index = 1;
}

message MapEntryProto {
  required string key = 1;
  required int64 value_object_index = 2;
}

message MapProto {
  repeated floating_temple.toy_lang.MapEntryProto entry = 1;
}

message RangeIteratorProto {
  required int64 limit = 1;
  // TODO(dss): Rename this field.
  required int64 i = 2;
}

message FunctionProto {
}

message ProgramProto {
  required floating_temple.toy_lang.ExpressionProto expression = 1;
}

message ObjectProto {
  enum Type {
    UNKNOWN = 0;

    NONE = 1;
    BOOL = 2;
    INT = 3;
    STRING = 4;
    SYMBOL = 29;
    VARIABLE = 30;
    EXPRESSION = 6;
    LIST = 7;
    MAP = 8;
    RANGE_ITERATOR = 9;
    LIST_FUNCTION = 10;
    GET_VARIABLE_FUNCTION = 31;
    SET_VARIABLE_FUNCTION = 11;
    FOR_FUNCTION = 12;
    RANGE_FUNCTION = 13;
    PRINT_FUNCTION = 14;
    ADD_FUNCTION = 15;
    BEGIN_TRAN_FUNCTION = 16;
    END_TRAN_FUNCTION = 17;
    IF_FUNCTION = 18;
    NOT_FUNCTION = 19;
    WHILE_FUNCTION = 21;
    LESS_THAN_FUNCTION = 22;
    LEN_FUNCTION = 23;
    LIST_APPEND_FUNCTION = 24;
    LIST_GET_FUNCTION = 25;
    MAP_IS_SET_FUNCTION = 26;
    MAP_GET_FUNCTION = 27;
    MAP_SET_FUNCTION = 28;
  }

  // Exactly one of the following fields must be set.
  optional floating_temple.toy_lang.NoneProto none_object = 1;
  optional floating_temple.toy_lang.BoolProto bool_object = 2;
  optional floating_temple.toy_lang.IntProto int_object = 3;
  optional floating_temple.toy_lang.StringProto string_object = 4;
  optional floating_temple.toy_lang.SymbolProto symbol_object = 29;
  optional floating_temple.toy_lang.VariableProto variable_object = 30;
  optional floating_temple.toy_lang.ExpressionObjectProto expression_object = 6;
  optional floating_temple.toy_lang.ListProto list_object = 7;
  optional floating_temple.toy_lang.MapProto map_object = 8;
  optional floating_temple.toy_lang.RangeIteratorProto
      range_iterator_object = 9;
  optional floating_temple.toy_lang.FunctionProto list_function = 10;
  optional floating_temple.toy_lang.FunctionProto get_variable_function = 31;
  optional floating_temple.toy_lang.FunctionProto set_variable_function = 11;
  optional floating_temple.toy_lang.FunctionProto for_function = 12;
  optional floating_temple.toy_lang.FunctionProto range_function = 13;
  optional floating_temple.toy_lang.FunctionProto print_function = 14;
  optional floating_temple.toy_lang.FunctionProto add_function = 15;
  optional floating_temple.toy_lang.FunctionProto begin_tran_function = 16;
  optional floating_temple.toy_lang.FunctionProto end_tran_function = 17;
  optional floating_temple.toy_lang.FunctionProto if_function = 18;
  optional floating_temple.toy_lang.FunctionProto not_function = 19;
  optional floating_temple.toy_lang.FunctionProto while_function = 21;
  optional floating_temple.toy_lang.FunctionProto less_than_function = 22;
  optional floating_temple.toy_lang.FunctionProto len_function = 23;
  optional floating_temple.toy_lang.FunctionProto list_append_function = 24;
  optional floating_temple.toy_lang.FunctionProto list_get_function = 25;
  optional floating_temple.toy_lang.FunctionProto map_is_set_function = 26;
  optional floating_temple.toy_lang.FunctionProto map_get_function = 27;
  optional floating_temple.toy_lang.FunctionProto map_set_function = 28;
}
